#! /bin/sh
DRY_RUN="NO"
RESET="NO"
POSSIBLE_EXTANT_KEY=$(ls *.gpg.key)
SKIP_INDEX="NO"
START_HTTPD="NO"
HTTPD_LOCAL_ONLY="NO"
USE_TOR="NO"
USE_I2P="NO"

CURDIR=$(pwd)

REPONAME="Testing Repository"
REPODESC="This is a place where I put testable packages of my apps."
ORIGIN="user.github.io"
CODENAME="testing"
REPOARCH="i386"
POLICY="main"
KEY="Example"
OVERRIDE="override.testing"

if [ -f /usr/bin/pkpage-html ]; then
        alias pkpage-html=/usr/bin/pkpage-html | markdown
elif [ -f /usr/local/bin/pkpage-html ]; then
        alias pkpage-html=/usr/local/bin/pkpage-html | markdown
elif [ -f ./pkpage.sh ]; then
        alias pkpage-html="/bin/bash -c \"markdown <($CURDIR/pkpage $@)\""
fi
SRCDIR="$CURDIR/packages"

. "./aptnow.conf"

while [ "$#" -gt 0 ]; do
	arg="$1"
	case $arg in
		-d|--directory)
			CURDIR="$2"
			shift
		;;
		-o|--origin)
			ORIGIN="$2"
			shift
		;;
		-c|--codename)
			CODENAME="$2"
			shift
		;;
		-a|--arch)
			REPOARCH="$2"
			shift
		;;
		-p|--policy)
			POLICY="$2"
			shift
		;;
		-k|--key)
			KEY="$2"
			shift
		;;
		-s|--sources)
			SRCDIR="$2"
			shift
		;;
		-q|--override)
			OVERRIDE="$2"
			shift
		;;
		-m,|--message)
			MESSAGE="$2"
			shift
		;;
                -n,|--name)
			REPONAME="$2"
			shift
		;;
                -v,|--desc)
			REPODESC="$2"
			shift
		;;
		-c|--check)
			CHECK="YES"
		;;
		-r|--reset)
			RESET="YES"
		;;
		-u|--user|--org|--organization)
			ORG="YES"
		;;
                -l|--serve)
			START_HTTPD="YES"
		;;
                -f|--hide)
                        LOCAL_ONLY_HTTPD="YES"
                ;;
                -t|--tor)
                        USE_TOR="YES"
                ;;
                -i|--i2p)
                        USE_I2P="YES"
                ;;
                -x|--skindex)
                        USE_I2P="YES"
                ;;
		-h|--help)
			H="YES"
			DRY_RUN="YES"
		;;
	esac
	shift
done
KEYNAME=$(echo $ORIGIN | tr "/" ".")
HELP="
apt-now personal repository tool\n
================================\n
This tool helps developers host their own applications by posting them to \n
static pages for download. \n
\t	-d \ --directory\n
\t\t		Work in this directory, uses current directory by default\n
\t	-o \ --origin\n
\t\t		URL of the repository\n
\t	-c \ --codename\n
\t\t		Codename you want to use, defaults is \"testing\"\n
\t	-a \ --arch\n
\t\t		Architecture you want to host, defaults to \"all\"\n
\t	-p \ --policy\n
\t\t		Policy of packages you want to host, defaults to \"main\"\n
\t	-k \ --key\n
\t\t		ID of the package signing key\n
\t	-s \ --sources\n
\t\t		Folder with the packages to include in the repo\n
\t	-q \ --override\n
\t\t		Name of the override file\n
\t	-m \ --message\n
\t\t		Message to include in the commit\n
\t	-n \ --name\n
\t\t		Human-readable name of the Repository\n
\t	-v \ --desc\n
\t\t		Detailed repository description\n
\t	-c \ --check\n
\t\t		Make sure the dependencies are installed\n
\t	-r \ --reset\n
\t\t		Re-generate all components of the repository\n
\t	-u \ --user \ --org \ --organization\n
\t\t		Us as user/organization page, post page to master branch\n
\t	-l \ --serve\n
\t\t		Serve with a local, static httpd on port 45291(debia).
\t	-f \ --hide\n
\t\t		Make local httpd only accessible by localhost.
\t	-t \ --tor\n
\t\t		Serve local httpd with Tor Hidden Service.
\t	-i \ --i2p\n
\t\t		Point i2p eepSite at apt-now directory.
\t	-x \ --skindex\n
\t\t		Skip generating index
\t	-h \ --help\n
\t\t		Display this help message\n\n

to add this repository to your Debian-based system:\n
\t\t	echo \"deb https://$ORIGIN/debian $CODENAME main\" | sudo tee /etc/apt/sources.list.d/$ORIGIN.list\n
\t	wget -qO - https://$ORIGIN/$KEYNAME.gpg.key | sudo apt-key add -\n

alternatively via Tor:\n\n

\t\t	echo \"deb http://$TOR_INDEX/debian $CODENAME main\" | sudo tee /etc/apt/sources.list.d/$TOR_INDEX.list\n
\t	wget -qO - http://$TOR_INDEX/$KEYNAME.gpg.key | sudo apt-key add -\n
"

BASEDIR="$CURDIR/debian"
CONFDIR="$CURDIR/debian/conf"
if [ ! -d "$BASEDIR" ]; then
        mkdir -p "$CONFDIR"
else
        \rm -rf "$BASEDIR"
        mkdir -p "$CONFDIR"
fi

INFODIR="$CURDIR/info"
if [ ! -d "$INFODIR" ]; then
        mkdir -p "$INFODIR"
else
        \rm -rf "$INFODIR"
        mkdir -p "$INFODIR"
fi

confirm(){
	read -r -p "${1: -Are you sure? [y/N]} " response
	case $response in
		[yY][eE][sS])
			local s="YES"
			;;
		*)
			local s="NO"
			;;
	esac
	echo "$s"
}

checkdepends(){
	sudo apt-get install gnupg git rng-tools dpkg-sig reprepro
	sudo service rng-tools start
}

generatekey(){
	gpg --gen-key
}

enterkey(){
	KEYED="NO"
	while [ "$KEYED"="NO" ]; do
		read -r -p "Enter the key that you want to use to sign your repository" KEY
		KEYED=confirm
	done
}

createdirs(){
	if [ -d "$CONFDIR" ]; then
		echo "directory exists"
	else
		mkdir -p "$CONFDIR"
	fi
}

gendistrofile(){
	echo "Origin: $ORIGIN"		> "$CONFDIR/distributions"
	echo "Label: $ORIGIN"		>> "$CONFDIR/distributions"
	echo "Codename: $CODENAME"	>> "$CONFDIR/distributions"
	echo "Architectures: $REPOARCH"	>> "$CONFDIR/distributions"
	echo "Components: $POLICY"	>> "$CONFDIR/distributions"
	#echo "Description: $REPODESC"	>> "$CONFDIR/distributions"
	echo "SignWith: $KEY"		>> "$CONFDIR/distributions"
	echo "DebOverride: $OVERRIDE"	>> "$CONFDIR/distributions"
	echo "DscOverride: $OVERRIDE"	>> "$CONFDIR/distributions"
	touch "$CONFDIR/$OVERRIDE"
}

genconfoptions(){
	echo "verbose"		> "$CONFDIR/options"
	echo "ask-passphrase"	>> "$CONFDIR/options"
	echo "basedir $BASEDIR"	>> "$CONFDIR/options"
}

generaterkey(){
    if [ $POSSIBLE_EXTANT_KEY != $KEYNAME.gpg.key ]; then
        gpg --armor --output "$CURDIR/$KEYNAME.gpg.key" --export $KEY
        \rm $POSSIBLE_EXTANT_KEY
    fi
    if [ -f $POSSIBLE_EXTANT_KEY ]; then
        gpg --armor --output "$CURDIR/$KEYNAME.gpg.key.tmp" --export $KEY
        if [ ! $(diff $CURDIR/$KEYNAME.gpg.key.tmp $POSSIBLE_EXTANT_KEY) = "" ]; then
            mv $CURDIR/$KEYNAME.gpg.key.tmp $CURDIR/$KEYNAME.gpg.key
        elif [ ! -f "$CURDIR/$KEYNAME.gpg.key" ]; then
            mv $CURDIR/$KEYNAME.gpg.key.tmp $CURDIR/$KEYNAME.gpg.key
        fi
    fi
    if [ -f "$CURDIR/$KEYNAME.gpg.key" ]; then
        \rm $CURDIR/$KEYNAME.gpg.key.tmp
    fi
}
hdpage(){
    DOCTYPE_HEADER='<!DOCTYPE html>'
    HTML='<html>'
    if [ -z $TITLE ]; then
        TITLE='web page'
    fi
    if [ ! -z $LANG ]; then
        HTML="<html lang=$LANG>"
    fi
HEADER="<head>\n
\t<meta charset=\"utf-8\">\n
\t<title>$TITLE</title>\n
\t<link rel=\"stylesheet\" href=\"style.css\">\n
\t<script src=\"script.js\"></script>\n
</head>\n
"

    echo $DOCTYPE_HEADER
    echo $HTML
    printf "%b\n" $HEADER
}
includepackages(){
	for f in $SRCDIR/*.deb ; do
                reprepro --basedir $BASEDIR includedeb $CODENAME "$f";
		export POSTPATH=$(echo $f | sed "s|$SRCDIR|$INFODIR|")
                export TITLE=$(echo $f | sed "s|$SRCDIR||")
                export PARENT=".."
                hdpage > $POSTPATH.html
                pkpage-html -f $f >> $POSTPATH.html
        done
	for f in $SRCDIR/*.dsc ; do
                reprepro --basedir $BASEDIR includedsc $CODENAME "$f";
		export POSTPATH=$(echo $f | sed "s|$SRCDIR|$INFODIR|")
                export TITLE=$(echo $f | sed "s|$SRCDIR||")
                hdpage > $POSTPATH.html
                scpage-html -f $f >> $POSTPATH.html
        done
	for f in $SRCDIR/*.changes ; do
                reprepro --ignore=wrongdistribution --basedir $BASEDIR include $CODENAME "$f";
		export POSTPATH=$(echo $f | sed "s|$SRCDIR|$INFODIR|")
                export TITLE=$(echo $f | sed "s|$SRCDIR||")
#                hdpage > $POSTPATH.html
#                pkpage-html -f $f >> $POSTPATH.html
        done
}
constructindex(){
        export TITLE="$ORIGIN"
        TOR_INDEX=$(sudo cat "/var/lib/tor/apt-now/host")
        INDEX_HEADER="$REPONAME\n
============\n
$CODENAME\n
------------\n
###$REPOARCH\n
###$POLICY\n
###$KEY\n
###$ORIGIN\n
####Latest update: $DATE\n
\n\n</div>\n\n
"
        TRIMMED_REPODESC=$(echo $REPODESC | tr "\n" " ")
        INDEX_DETAIL="\n
###Description:\n
$TRIMMED_REPODESC\n
"
        INDEX_FOOTER="This repository was generated with [apt-now](https://cmotc.github.io/apt-now), a static site
generator which emits apt repositories

###to add this repository to your Debian-based system:

        echo \"deb https://$ORIGIN/debian $CODENAME main\" | sudo tee /etc/apt/source.list.d/$KEYNAME.list\n
        wget -qO - https://$ORIGIN/$KEYNAME.gpg.key | sudo apt-key add -\n

###alternatively via Tor:

        echo \"deb http://$TOR_INDEX/debian $CODENAME main\" | sudo tee /etc/apt/source.list.d/$TOR_INDEX.list\n
        wget -qO - http://$TOR_INDEX/$KEYNAME.gpg.key | sudo apt-key add -\n
"
        hdpage | tee index.html
        printf "%b\n" "\n\n<div id=\"header\">\n\n" | tee -a index.html
        printf "%b\n" $INDEX_HEADER | sed -e 's/^[ \t]*//' | markdown | tee -a index.html
        printf "%b\n" "\n\n</div>\n\n" | tee -a index.html
        printf "%b\n" "\n\n<div id=\"content\">\n\n" | tee -a index.html
        printf "%b\n" $INDEX_DETAIL | sed -e 's/^[ \t]*/        /' | markdown | tee -a index.html
        printf "%b\n" "$INDEX_FOOTER" | sed -e 's/^[ \t]*/        /' | markdown | tee -a index.html
        printf "%b\n" "\n\n</div>\n\n" | tee -a index.html
        printf "%b\n" "\n\n<div id=\"sidebar\">\n\n" | tee -a index.html
        printf "%b\n" "###Binary Packages:\n\n" | markdown | tee -a index.html
	for f in $INFODIR/*.deb.html ; do
                TRIMMED_CLEAN=$(echo $f | sed "s|$INFODIR/||")
                echo "  * [$TRIMMED_CLEAN](info/$TRIMMED_CLEAN)" | markdown | tee -a index.html
        done
        printf "%b\n" "###Source Packages:\n\n" | markdown | tee -a index.html
        for f in $INFODIR/*.dsc.html ; do
                TRIMMED_CLEAN=$(echo $f | sed "s|$INFODIR/||")
                echo "  * [$TRIMMED_CLEAN](info/$TRIMMED_CLEAN)" | markdown | tee -a index.html
        done
        #printf "%b\n" "\n\n</div>\n\n" | tee -a index.html
        #printf "%b\n" "\n\n<div id=\"footer\">\n\n" | tee -a index.html
        printf "%b\n" "\n\n</div>\n\n" | tee -a index.html
        export TITLE="$REPONAME"
        echo "</html>" | tee -a index.html
}

if [ "$H" = "YES" ]; then
	echo $HELP
        exit 1
fi
if [ "$DRY_RUN" = "NO" ]; then
	if [ -d "$SRCDIR" ]; then
		if [ -d "$CURDIR/.git" ]; then
			if [ "$RESET" = "YES" ]; then
				CHECK="YES"
				echo "cleaning existing repo"
				rm -rf "$BASEDIR"
			fi
			if [ "$CHECK" = "YES" ]; then
				echo "checking dependencies"
				checkdepends
				createdirs
			fi
			if [ "$RESET" = "YES" ]; then
				echo "generating keys"
				generatekey
				enterkey
				echo "creating directories"
			fi
			echo "generating distro file"
			gendistrofile
			echo "generating conf options"
			genconfoptions
			echo "outputting key"
			generaterkey
			echo "setting up packages"
			includepackages
			DATE=date
                        if [ ! "$SKIP_INDEX" = "YES" ]; then
                                constructindex
                        fi
                        cd $CURDIR
			if [ "$ORG" = "YES" ]; then
				git add . && git commit -am "Repository update: $MESSAGE $DATE" && git push $FORK master
			else
				git add . && git commit -am "Repository update: $MESSAGE $DATE" && git push $FORK gh-pages
			fi
		else
			echo "Fatal Error, this is not a git repository. Please create a git repository and enable github pages to use this script."
		fi
	else
		echo "Fatal Error, packages not found in package source directory"
	fi
fi

if [ "$LOCAL_ONLY_HTTPD" = "YES" ]; then
        sudo iptables -A INPUT -p tcp -s localhost --dport 45291 -j ACCEPT
        sudo iptables -A INPUT -p tcp --dport 45291 -j DROP
fi

if [ "$START_HTTPD" = "YES" ]; then
    if [ -f /usr/bin/httpd-now ]; then
        httpd-now -dir="$CURDIR" -addr=":45291" &
    elif [ -f ./httpd-now ]; then
        ./httpd-now -dir="$CURDIR" -addr=":45291" &
    elif [ -f ./uhttpd.go ]; then
        gccgo uhttpd.go -o httpd-now
        ./httpd-now -dir="$CURDIR" -addr=":45291" &
    fi
fi

if [ "$USE_TOR" = "YES" ]; then
    if [ ! sudo cat /etc/tor/torrc | grep "HiddenServiceDir /var/lib/tor/apt-now/" ]; then
        echo "HiddenServiceDir /var/lib/tor/apt-now/" | sudo tee -a /etc/tor/torrc
    fi
    if [ ! sudo cat /etc/tor/torrc | grep "HiddenServicePort 80 127.0.0.1:45291" ]; then
        echo "HiddenServicePort 80 127.0.0.1:45291" | sudo tee -a /etc/tor/torrc
    fi
    sudo service tor restart
fi

if [ "$USE_I2P" = "YES" ]; then
    if [ ! sudo cat /var/lib/i2p/i2p-config/eepsite/contexts/base-context.xml | grep "$CURDIR" ]; then
        sudo sed -i "s|/var/lib/i2p/i2p-config/eepsite/docroot/|$CURDIR|"
    fi
    sudo service i2p restart
fi
